#!/usr/bin/env ruby
# frozen_string_literal: true

require "piga/parser"
require "piga/lexer.rex.rb"

# To bootstrap, make incremental changes to each parser, then create new
# instances.
#
# For example, to support the `%name` directive (any directive, really), we'd
# proceed like so (v1 is the current parser, v2 is the next one, etc):
#
# - update the grammar file to recognize the new feature (using v2 of the parser, as generated by v1)
#   - this is easily verified by running v2 iteractively
# - update the driver `exe/piga` to use the new parser
# - update the code generator to output the new feature
# - generate v3
# - verify v3 acts as intended, if so, replace v1 with v3
#
# Now your parser recognizes new things.

# require_relative "../v2"
# require_relative "../v3"
# require_relative "../v4"
# require_relative "../v5"

file = ARGV[0]
abort "no grammar file supplied" unless file && File.file?(file)

lexer = Piga::Grammar::Lexer.new
lexer.instance_eval { scan_setup File.read(file) }

parser = Piga::Grammar::Parser.new lexer
grammar = parser.parse

gen = Piga::Grammar::Generator.new grammar, :input_file => file
# File.open(out, "w") { |f| gen.generate f }
puts gen.generate
